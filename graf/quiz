digraph clusterquiz {
	graph [label=quiz]
	1 [label="import random
import math
def __init__(self):...
def generate_question(self, operation=None):...
def ask_question(self, question, correct_answer):...
def run_quiz(self, num_questions=5):...
if __name__ == '__main__':
"]
	51 [label="quiz = MathQuiz()
quiz.run_quiz()
"]
	"51_calls" [label="MathQuiz
quiz.run_quiz" shape=box]
	51 -> "51_calls" [label=calls style=dashed]
	1 -> 51 [label="__name__ == '__main__'"]
	subgraph cluster__init__ {
		graph [label=__init__]
		3 [label="self.score = 0
"]
	}
	subgraph clustergenerate_question {
		graph [label=generate_question]
		6 [label="operations = ['+', '-', '*', '/']
num1 = random.randint(1, 10)
num2 = random.randint(1, 10)
if operation and operation not in operations:
"]
		"6_calls" [label="random.randint
random.randint" shape=box]
		6 -> "6_calls" [label=calls style=dashed]
		8 [label="if not operation:
"]
		9 [label="operation = random.choice(operations)
"]
		"9_calls" [label="random.choice" shape=box]
		9 -> "9_calls" [label=calls style=dashed]
		10 [label="if operation == '/':
"]
		11 [label="correct_answer = math.floor(num1 / num2 * 100) / 100
question = f'What is {num1} {operation} {num2}? (Maximum of the two MSD.)'
"]
		"11_calls" [label="math.floor" shape=box]
		11 -> "11_calls" [label=calls style=dashed]
		12 [label="return question, correct_answer
"]
		11 -> 12 [label=""]
		10 -> 11 [label="operation == '/'"]
		13 [label="correct_answer = eval(f'{num1} {operation} {num2}')
question = f'What is {num1} {operation} {num2}?'
"]
		"13_calls" [label=eval shape=box]
		13 -> "13_calls" [label=calls style=dashed]
		13 -> 12 [label=""]
		10 -> 13 [label="(operation != '/')"]
		9 -> 10 [label=""]
		8 -> 9 [label="not operation"]
		8 -> 10 [label="(not not operation)"]
		6 -> 8 [label="(not (operation and operation not in operations))"]
		6 -> 8 [label="(operation and operation not in operations)"]
	}
	subgraph clusterask_question {
		graph [label=ask_question]
		17 [label="if not isinstance(correct_answer, int) and not isinstance(correct_answer, float
"]
		19 [label="if isinstance(correct_answer, float) and len(str(correct_answer).split('.')[-1]
"]
		21 [label="ok = False
"]
		22 [label="while not ok:
"]
		23 [label="user_input = input(question + ' ')
if user_input.replace('.', '', 1).isdigit():
"]
		"23_calls" [label=input shape=box]
		23 -> "23_calls" [label=calls style=dashed]
		25 [label="user_answer = float(user_input)
user_answer = math.floor(user_answer * 100) / 100
ok = True
"]
		"25_calls" [label="float
math.floor" shape=box]
		25 -> "25_calls" [label=calls style=dashed]
		25 -> 22 [label=""]
		23 -> 25 [label="user_input.replace('.', '', 1).isdigit()"]
		27 [label="print('Please enter a valid number.')
"]
		"27_calls" [label=print shape=box]
		27 -> "27_calls" [label=calls style=dashed]
		27 -> 22 [label=""]
		23 -> 27 [label="(not user_input.replace('.', '', 1).isdigit())"]
		22 -> 23 [label="not ok"]
		24 [label="if user_answer == correct_answer:
"]
		28 [label="print('Correct!')
self.score += 1
"]
		"28_calls" [label=print shape=box]
		28 -> "28_calls" [label=calls style=dashed]
		24 -> 28 [label="user_answer == correct_answer"]
		30 [label="print(f'Wrong! The correct answer was {correct_answer}.')
"]
		"30_calls" [label=print shape=box]
		30 -> "30_calls" [label=calls style=dashed]
		24 -> 30 [label="(user_answer != correct_answer)"]
		22 -> 24 [label="(not not ok)"]
		21 -> 22 [label=""]
		19 -> 21 [label="(not (isinstance(correct_answer, float) and len(str(correct_answer).split(
    '.')[-1]) > 2))"]
		19 -> 21 [label="(isinstance(correct_answer, float) and len(str(correct_answer).split('.')[-
    1]) > 2)"]
		17 -> 19 [label="(not (not isinstance(correct_answer, int) and not isinstance(correct_answer,
    float)))"]
		17 -> 19 [label="(not isinstance(correct_answer, int) and not isinstance(correct_answer, float))"]
	}
	subgraph clusterrun_quiz {
		graph [label=run_quiz]
		33 [label="self.score = 0
i = 0
num_wrong_answers = 0
max_wrong_answers = num_questions // 2 + 1
if not 1 <= num_questions <= 10:
"]
		35 [label="while i < num_questions:
"]
		36 [label="question, correct_answer = self.generate_question()
self.ask_question(question, correct_answer)
i += 1
if self.score < i - num_wrong_answers:
"]
		"36_calls" [label="self.generate_question
self.ask_question" shape=box]
		36 -> "36_calls" [label=calls style=dashed]
		38 [label="num_wrong_answers += 1
if num_wrong_answers >= max_wrong_answers:
"]
		40 [label="print(\"Can't reach passing score anymore.\")
"]
		"40_calls" [label=print shape=box]
		40 -> "40_calls" [label=calls style=dashed]
		37 [label="if self.score >= num_questions / 2:
"]
		42 [label="print(f'Quiz completed! Your score: {self.score}/{num_questions} (Passed)')
"]
		"42_calls" [label=print shape=box]
		42 -> "42_calls" [label=calls style=dashed]
		43 [label="if 0 < self.score < num_questions and num_wrong_answers < max_wrong_answers:
"]
		45 [label="print('Good job, but you can do better!')
"]
		"45_calls" [label=print shape=box]
		45 -> "45_calls" [label=calls style=dashed]
		43 -> 45 [label="0 < self.score < num_questions and num_wrong_answers < max_wrong_answers"]
		47 [label="if self.score == num_questions:
"]
		48 [label="print('Perfect score, well done!')
"]
		"48_calls" [label=print shape=box]
		48 -> "48_calls" [label=calls style=dashed]
		47 -> 48 [label="self.score == num_questions"]
		43 -> 47 [label="(not (0 < self.score < num_questions and num_wrong_answers < max_wrong_answers)
    )"]
		42 -> 43 [label=""]
		37 -> 42 [label="self.score >= num_questions / 2"]
		44 [label="print(f'Quiz completed! Your score: {self.score}/{num_questions} (Failed)')
"]
		"44_calls" [label=print shape=box]
		44 -> "44_calls" [label=calls style=dashed]
		44 -> 43 [label=""]
		37 -> 44 [label="(self.score < num_questions / 2)"]
		40 -> 37 [label=""]
		38 -> 40 [label="num_wrong_answers >= max_wrong_answers"]
		38 -> 35 [label="(num_wrong_answers < max_wrong_answers)"]
		36 -> 38 [label="self.score < i - num_wrong_answers"]
		36 -> 35 [label="(self.score >= i - num_wrong_answers)"]
		35 -> 36 [label="i < num_questions"]
		35 -> 37 [label="(i >= num_questions)"]
		33 -> 35 [label="(not not 1 <= num_questions <= 10)"]
		33 -> 35 [label="not 1 <= num_questions <= 10"]
	}
}
